name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: node-ubuntu-docker-base

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run tests
        run: |
          make  test

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      # Building and publishing to Docker Hub
      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(git rev-parse --short HEAD)
      - name: Build the tagged Docker image
        run: docker build . --file Dockerfile --tag ${GITHUB_REPOSITORY}:${{steps.vars.outputs.tag}}
      - name: Push the tagged Docker image
        run: docker push ${GITHUB_REPOSITORY}:${{steps.vars.outputs.tag}}
      - name: Build the latest Docker image
        run: docker build . --file Dockerfile --tag ${GITHUB_REPOSITORY}:latest
      - name: Push the latest Docker image
        run: docker push ${GITHUB_REPOSITORY}:latest
      ## Alternative setup for Pushing to Github packages. Unfortunately,
      ## Github packages is not public, so they cannot be publicly downloaded
      ## even for a public repository. For the time being commenting all of this
      ## out in favor of using Docker hub directly instead.
      # - name: Build image
      #   run: docker build . --file Dockerfile --tag $IMAGE_NAME
      #
      # - name: Log into registry
      #   run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      #
      # - name: Push image
      #   run: |
      #     IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
      #
      #     # Change all uppercase to lowercase
      #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
      #
      #     # Strip git ref prefix from version
      #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #
      #     # Strip "v" prefix from tag name
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
      #
      #     # Use Docker `latest` tag convention
      #     [ "$VERSION" == "master" ] && VERSION=latest
      #
      #     echo IMAGE_ID=$IMAGE_ID
      #     echo VERSION=$VERSION
      #
      #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
      #     docker push $IMAGE_ID:$VERSION
